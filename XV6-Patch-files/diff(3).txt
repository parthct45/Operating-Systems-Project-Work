*** original/linux-5.16.11/include/linux/syscalls.h	2022-02-23 16:36:08.000000000 +0530
--- modified/linux-5.16.11/include/linux/syscalls.h	2024-02-03 10:37:22.964198471 +0530
***************
*** 1386,1389 ****
--- 1386,1391 ----
  		int __user *optlen);
  int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
  		int optlen);
+ asmlinkage long sys_hello(void);
+ asmlinkage long sys_ances_pid(pid_t pId);
  #endif
*** original/linux-5.16.11/arch/x86/entry/syscalls/syscall_64.tbl	2022-02-23 16:36:08.000000000 +0530
--- modified/linux-5.16.11/arch/x86/entry/syscalls/syscall_64.tbl	2024-02-03 10:43:50.004210749 +0530
***************
*** 371,376 ****
--- 371,378 ----
  447	common	memfd_secret		sys_memfd_secret
  448	common	process_mrelease	sys_process_mrelease
  449	common	futex_waitv		sys_futex_waitv
+ 450	common	hello			sys_hello
+ 451	common	ances_pid		sys_ances_pid
  
  #
  # Due to a historical design error, certain syscalls are numbered differently

*** original/linux-5.16.11/hello/hello.c	2024-02-04 19:32:01.901014872 +0530
--- modified/linux-5.16.11/hello/hello.c	2024-02-03 10:23:21.012465166 +0530
***************
*** 0 ****
--- 1,9 ----
+ #include <linux/kernel.h>
+ #include <linux/syscalls.h>
+ 
+ SYSCALL_DEFINE0(hello)
+ 
+ {
+     printk("Hello, from inside Linux kernel\n");// ignore colouring here
+     return 0;
+ }
 
*** original/linux-5.16.11/pId/pId.c	2024-02-04 19:34:24.316542576 +0530
--- modified/linux-5.16.11/pId/pId.c	2024-02-03 10:19:15.754365585 +0530
***************
*** 0 ****
--- 1,25 ----
+ #include<linux/syscalls.h>
+ #include<linux/kernel.h>
+ #include<linux/sched.h>
+ 
+ void helper(struct task_struct *task){
+ 	if(task == NULL || task->pid == 0) return ; 
+ 	printk("Ancestor -> %s ,  PID -> %d\n" , task->comm , task->pid) ; 
+         helper(task->real_parent);
+ }	
+ 
+ SYSCALL_DEFINE1(ances_pid, pid_t, pId) {
+     struct task_struct *task_str;
+ 
+     task_str = find_task_by_vpid(pId) ;
+     if(!task_str){
+ 	   printk("Invalid Pid") ; 
+ 	   return -1 ;
+     } 
+     helper(task_str) ; 
+     
+     return 0;
+ }
+ 
+ 
+ 
*** original/hello.c	2024-02-04 20:37:34.833942274 +0530
--- modified/hello.c	2024-02-01 21:43:54.792302276 +0530
***************
*** 0 ****
--- 1,29 ----
+ #include <linux/kernel.h>
+ #include <sys/syscall.h>
+ #include <stdio.h>
+ #include <unistd.h>
+ #include <string.h>
+ #include <errno.h>
+ 
+ #define __NR_hello 450
+ 
+ long hello_syscall(void)
+ {
+     return syscall(__NR_hello);
+ }
+ 
+ int main(int argc, char *argv[])
+ {
+     long activity;
+     activity = hello_syscall();
+ 
+     if(activity < 0)     {
+         perror("System call failed\n");
+     }
+ 
+     else     {
+         printf("System call worked!\n"); // ignore colouring here
+     }
+ 
+     return 0;
+ }
*** original/pId.c	2024-02-04 20:37:42.582527608 +0530
--- modified/pId.c	2024-02-04 20:49:10.430169540 +0530
***************
*** 0 ****
--- 1,32 ----
+ #include <linux/kernel.h>
+ #include <sys/syscall.h>
+ #include <stdio.h>
+ #include <unistd.h>
+ #include <string.h>
+ #include <errno.h>
+ 
+ #define __NR_pid 451
+ 
+ long hello_syscall(pid_t pid)
+ {
+     return syscall(__NR_pid , pid);
+ }
+ 
+ int main(int argc, char *argv[])
+ {	
+     pid_t pId ; 
+     printf("Enter your Pid ") ; 
+     scanf("%d", &pId) ; 
+     long activity;
+     activity = hello_syscall(pId);
+ 
+     if(activity < 0)     {
+         perror("System call failed\n");
+     }
+ 
+     else     {
+         printf("System call worked!\n"); // ignore colouring here
+     }
+ 
+     return 0;
+ }
*** original/linux-5.16.11/Makefile	2022-02-23 16:36:08.000000000 +0530
--- modified/linux-5.16.11/Makefile	2024-02-03 10:30:43.784479213 +0530
***************
*** 1092,1098 ****
  export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/
  core-$(CONFIG_BLOCK)	+= block/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
--- 1092,1098 ----
  export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ hello/ pId/
  core-$(CONFIG_BLOCK)	+= block/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
