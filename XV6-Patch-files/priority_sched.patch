diff --git a/Makefile b/Makefile
index 09d790c..111b7d7 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,9 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_ps\
+	_nice\
+	_tst\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +253,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c ps.c nice.c tst.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/defs.h b/defs.h
index 82fb982..7f47bca 100644
--- a/defs.h
+++ b/defs.h
@@ -80,6 +80,7 @@ void            lapiceoi(void);
 void            lapicinit(void);
 void            lapicstartap(uchar, uint);
 void            microdelay(int);
+void            lapicw(int index, int value);
 
 // log.c
 void            initlog(int dev);
@@ -120,6 +121,8 @@ void            userinit(void);
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+int             cps(void);
+int             nice(int pid, int priorty);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
diff --git a/exec.c b/exec.c
index b40134f..acba889 100644
--- a/exec.c
+++ b/exec.c
@@ -99,6 +99,7 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  curproc->priority = 2;
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/lapic.c b/lapic.c
index b22bbd7..8a16ba4 100644
--- a/lapic.c
+++ b/lapic.c
@@ -44,7 +44,7 @@
 volatile uint *lapic;  // Initialized in mp.c
 
 //PAGEBREAK!
-static void
+void
 lapicw(int index, int value)
 {
   lapic[index] = value;
diff --git a/proc.c b/proc.c
index 806b1b1..04c12f1 100644
--- a/proc.c
+++ b/proc.c
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#define TICR    (0x0380/4)
 
 struct {
   struct spinlock lock;
@@ -88,6 +89,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->priority = 10;
 
   release(&ptable.lock);
 
@@ -325,23 +327,34 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   c->proc = 0;
-  
+  struct proc *p1; 
   for(;;){
     // Enable interrupts on this processor.
     sti();
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
+    struct proc *highP;
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
 
+      highP = p ;
+      for(p1 = ptable.proc; p1 < &ptable.proc[NPROC]; p1++){
+        if(p1->state != RUNNABLE)
+          continue;
+        if(highP->priority > p1->priority)   //larger value, lower priority
+          highP = p1;
+      }
+      p = highP ;
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
       c->proc = p;
       switchuvm(p);
       p->state = RUNNING;
+      lapicw(TICR, (10*10000000)/p->priority);
+
 
       swtch(&(c->scheduler), p->context);
       switchkvm();
@@ -532,3 +545,44 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+
+int
+cps()
+{
+struct proc *p;
+//Enables interrupts on this processor.
+sti();
+
+//Loop over process table looking for process with pid.
+acquire(&ptable.lock);
+cprintf("name \t pid \t state \t priority \n");
+for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  if(p->state == SLEEPING)
+          cprintf("%s \t %d \t SLEEPING \t %d \n ", p->name,p->pid,p->priority);
+        else if(p->state == RUNNING)
+          cprintf("%s \t %d \t RUNNING \t %d \n ", p->name,p->pid,p->priority);
+        else if(p->state == RUNNABLE)
+          cprintf("%s \t %d \t RUNNABLE \t %d \n ", p->name,p->pid,p->priority);
+}
+release(&ptable.lock);
+return 90;
+}
+
+
+
+int nice(int pid , int priority)
+{
+  struct proc * p ;
+  for(p=ptable.proc; p<&ptable.proc[NPROC] ;p++){
+          if(p->pid == pid){
+                  p->priority = priority ;
+                  cprintf("Prioriity of process %d set to %d ", pid , p->priority) ;
+                  return 1 ;
+                  break ;
+          }
+  }
+  return 0 ;
+
+}
+
diff --git a/proc.h b/proc.h
index 1647114..a4d5e27 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int priority;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index ee85261..eb891eb 100644
--- a/syscall.c
+++ b/syscall.c
@@ -103,6 +103,8 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+extern int sys_nice(void);
+extern int sys_cps(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +128,8 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_nice]    sys_nice,
+[SYS_cps]     sys_cps,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..c7981bf 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_nice   22
+#define SYS_cps    23
diff --git a/sysproc.c b/sysproc.c
index 0686d29..2bcf8b1 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+int sys_nice(void)
+{
+  int pid ;
+  int priority ;
+
+  if(argint(0, &pid)<0 || argint(1, &priority)<0)
+          return -1;
+  return nice(pid , priority) ;
+
+}
+
+int sys_cps(void)
+{
+        return cps() ;
+}
diff --git a/user.h b/user.h
index 4f99c52..43b41fe 100644
--- a/user.h
+++ b/user.h
@@ -23,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int nice(int pid, int priority);
+int cps(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/usertests.c b/usertests.c
index a1e97e7..88aa034 100644
--- a/usertests.c
+++ b/usertests.c
@@ -14,6 +14,59 @@ char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };
 int stdout = 1;
 
 // does chdir() call iput(p->cwd) in a transaction?
+
+// throughput checking function 
+// implementation remaining 
+void helper_one(void){
+	int pid ;
+	pid = fork() ; 
+	if(pid == 0){
+		printf(1, "Child created\n") ; 
+		exit() ; 
+	}
+	else{
+		wait() ;
+	} 
+}
+
+void helper_two(void){
+	int pid , x ;
+	pid = fork() ;
+	if(pid == 0){
+		printf(1, "Child created\n") ;
+		nice(getpid() , 1) ; 
+		for (int i = 0 ; i<4 ; i++){
+			x +=1000000*(i-1);
+		}
+		exit()  ;
+	}
+	else{
+		wait() ;
+	}
+}	
+
+void throughput(void){
+	int start_counter = uptime() ; 
+	helper_one() ;
+	int end_counter = uptime() ; 
+	int round_robin = end_counter - start_counter ; 
+	printf(1 ,"Round robin time %d\n" , end_counter - start_counter) ;
+
+
+	start_counter = uptime() ; 
+	helper_two() ; 
+	end_counter = uptime() ; 
+	int pri_sche = end_counter - start_counter ; 
+	printf(1 ,"Priority scheduling %d\n" , end_counter - start_counter) ; 
+
+	if(round_robin < pri_sche)
+	       printf(1 , "Priority test OK \n") ; 
+	else
+		printf(1 , "Test failed\n") ; 
+
+	exit() ; 
+}
+
 void
 iputtest(void)
 {
@@ -1796,8 +1849,9 @@ main(int argc, char *argv[])
   bigdir(); // slow
 
   uio();
-
+  throughput();
   exectest();
+  //throughput() ; 
 
   exit();
 }
diff --git a/usys.S b/usys.S
index 8bfd8a1..db27c6f 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,5 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(nice)
+SYSCALL(cps)
